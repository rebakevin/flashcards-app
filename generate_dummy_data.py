from utils.data import DataHandler

data_handler = DataHandler()

# Create decks
decks = ['Git', 'Python', 'SQL', 'Bash', 'Linux']
for deck in decks:
    data_handler.create_deck(deck)

# Card generator data
deck_questions = {
    1: [  # Git
        ("What is Git?", "Version control system"),
        ("What does 'git init' do?", "Initializes a new Git repository"),
        ("How to check the status of your Git repo?", "Use 'git status'"),
        ("What is a commit in Git?", "A saved change in the repo"),
        ("How do you stage a file?", "Use 'git add <file>'"),
        ("What command saves staged changes?", "git commit"),
        ("What does 'git log' show?", "Commit history"),
        ("How to undo the last commit?", "git reset --soft HEAD~1"),
        ("What is a Git branch?", "A parallel version of the repo"),
        ("How to create a branch?", "git branch <branch-name>"),
        ("How to switch branches?", "git checkout <branch-name>"),
        ("How to merge branches?", "git merge <branch-name>"),
        ("What does 'git pull' do?", "Fetch and merge changes from remote"),
        ("What does 'git push' do?", "Upload commits to remote"),
        ("How to clone a repo?", "git clone <url>"),
        ("How to view remote repos?", "git remote -v"),
        ("How to delete a branch?", "git branch -d <branch>"),
        ("What is a merge conflict?", "When two branches edit the same part"),
        ("How to resolve merge conflicts?", "Edit files, then commit"),
        ("What is .gitignore?", "File that tells Git what to ignore"),
        ("How to stash changes?", "git stash"),
        ("How to apply stashed changes?", "git stash apply"),
        ("What does 'git diff' do?", "Shows differences between commits"),
        ("What is a tag in Git?", "A snapshot or release point"),
        ("How to list all branches?", "git branch"),
        ("What is 'origin' in Git?", "The default remote name"),
        ("How to rename a branch?", "git branch -m new-name"),
        ("What does 'HEAD' refer to?", "Current commit"),
        ("How to fetch without merge?", "git fetch"),
        ("What is rebase in Git?", "Reapply commits on top of another base"),
    ],
    2: [  # Python
        ("What is Python?", "A high-level programming language"),
        ("How to print in Python?", "print('Hello')"),
        ("What is a list?", "An ordered, mutable collection"),
        ("What is a tuple?", "An ordered, immutable collection"),
        ("What is a dictionary?", "A key-value pair collection"),
        ("How to define a function?", "def my_function():"),
        ("What is a lambda function?", "An anonymous function"),
        ("What is None in Python?", "Represents absence of value"),
        ("What is a loop?", "Repeats code block multiple times"),
        ("How to write a for loop?", "for i in range(10):"),
        ("How to write a while loop?", "while condition:"),
        ("What is a module?", "A file with Python code"),
        ("What is import used for?", "To use code from other modules"),
        ("What is __name__ == '__main__'?", "Checks if script is run directly"),
        ("What is a class?", "Blueprint for objects"),
        ("What is an object?", "Instance of a class"),
        ("What is inheritance?", "Child class inherits from parent class"),
        ("What is an exception?", "An error during execution"),
        ("How to handle exceptions?", "Using try-except"),
        ("What is a list comprehension?", "Compact way to create lists"),
        ("What is slicing?", "Accessing part of a sequence"),
        ("What is len()?", "Returns length"),
        ("What is isinstance()?", "Checks object type"),
        ("How to open a file?", "open('file.txt')"),
        ("What is a generator?", "An iterator using yield"),
        ("What is the 'self' keyword?", "Refers to the instance"),
        ("What is a decorator?", "A function that modifies another"),
        ("What is pip?", "Python package installer"),
        ("What is venv?", "Tool for creating virtual environments"),
        ("What is PEP 8?", "Python style guide"),
    ],
    3: [  # SQL
        ("What is SQL?", "Structured Query Language"),
        ("What does SELECT do?", "Retrieves data from tables"),
        ("How to filter results?", "Using WHERE clause"),
        ("How to sort results?", "Using ORDER BY"),
        ("What is a primary key?", "A unique identifier for records"),
        ("What is a foreign key?", "Links to another table's primary key"),
        ("What does INSERT do?", "Adds new records"),
        ("What does UPDATE do?", "Modifies records"),
        ("What does DELETE do?", "Removes records"),
        ("How to avoid duplicates?", "Use DISTINCT"),
        ("What is a JOIN?", "Combines rows from multiple tables"),
        ("What is INNER JOIN?", "Only matching records from both tables"),
        ("What is LEFT JOIN?", "All left table + matched right records"),
        ("What is GROUP BY?", "Groups records by a column"),
        ("What is HAVING?", "Filters groups"),
        ("What is COUNT()?", "Counts number of records"),
        ("What is AVG()?", "Calculates average"),
        ("What is SUM()?", "Adds values"),
        ("What is LIKE used for?", "Pattern matching"),
        ("What is IN used for?", "Check if value is in a set"),
        ("What is NULL?", "Missing or undefined value"),
        ("How to rename a column?", "Use AS alias"),
        ("What is a subquery?", "Query inside another query"),
        ("What is a transaction?", "A set of SQL statements"),
        ("How to begin a transaction?", "BEGIN"),
        ("How to commit a transaction?", "COMMIT"),
        ("How to rollback a transaction?", "ROLLBACK"),
        ("What is a constraint?", "Rule applied to a column"),
        ("What is a view?", "Virtual table"),
        ("What is an index?", "Improves lookup speed"),
    ],
    4: [  # Bash
        ("What is Bash?", "A Unix shell and command language"),
        ("How to list files?", "ls"),
        ("How to change directory?", "cd"),
        ("How to copy files?", "cp source target"),
        ("How to move files?", "mv source target"),
        ("How to delete files?", "rm file"),
        ("How to see current directory?", "pwd"),
        ("What does 'touch' do?", "Creates a new file"),
        ("What is a shell script?", "A file with Bash commands"),
        ("How to run a script?", "./script.sh"),
        ("What is chmod?", "Change file permissions"),
        ("What is grep?", "Search text using patterns"),
        ("What is cat?", "Prints file content"),
        ("What is echo?", "Print text"),
        ("What is pipe (|)?", "Passes output to next command"),
        ("What is && in Bash?", "Runs next if previous succeeds"),
        ("What is || in Bash?", "Runs next if previous fails"),
        ("What is $0?", "Script name"),
        ("What is $1?", "First argument"),
        ("How to loop in Bash?", "for i in ...; do ...; done"),
        ("How to define a function?", "function_name() { ... }"),
        ("What is 'read'?", "Reads user input"),
        ("What is 'exit'?", "Exits the script"),
        ("How to check a condition?", "[ condition ]"),
        ("What is shebang (#!)?", "Specifies script interpreter"),
        ("What is 'find'?", "Search for files"),
        ("What is 'man'?", "Manual pages"),
        ("What is 'alias'?", "Creates shortcut commands"),
        ("What is 'history'?", "Shows command history"),
        ("What is 'cron'?", "Schedules recurring tasks"),
    ],
    5: [  # Linux
        ("What is Linux?", "An open-source operating system"),
        ("What is the kernel?", "Core part of the OS"),
        ("What is a distro?", "A Linux distribution like Ubuntu"),
        ("What is a package manager?", "Tool to manage software"),
        ("What is apt?", "Package manager for Debian/Ubuntu"),
        ("What is systemctl?", "Controls system services"),
        ("How to list users?", "cat /etc/passwd"),
        ("How to add user?", "useradd <username>"),
        ("How to delete user?", "userdel <username>"),
        ("How to check disk space?", "df -h"),
        ("How to check memory usage?", "free -m"),
        ("What is top?", "Shows running processes"),
        ("How to kill a process?", "kill <PID>"),
        ("What is sudo?", "Runs commands as root"),
        ("What is root?", "Superuser account"),
        ("What is /etc?", "System configuration files"),
        ("What is /home?", "User directories"),
        ("What is chmod?", "Change file permissions"),
        ("What is chown?", "Change file ownership"),
        ("How to update packages?", "apt update && apt upgrade"),
        ("What is tar?", "Archiving utility"),
        ("What is ssh?", "Secure remote login"),
        ("What is ping?", "Test network connection"),
        ("How to restart system?", "reboot"),
        ("How to shut down?", "shutdown now"),
        ("What is hostname?", "Name of the system"),
        ("What is uname?", "Displays system info"),
        ("What is crontab?", "Schedules recurring jobs"),
        ("What is /var/log?", "Stores system logs"),
        ("What is swap?", "Virtual memory on disk"),
    ]
}

# Insert cards into DB
for deck_id, cards in deck_questions.items():
    for question, answer in cards:
        data_handler.create_card(question, answer, deck_id)
